version: "3.9"
services:
    cron:
        image: crazymax/swarm-cronjob:latest
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        environment:
            LOG_LEVEL: info
        deploy:
            placement:
                constraints: [ node.role == manager ]

    frontend:
        image: ${REGISTRY}/auction-frontend:${IMAGE_TAG}
        environment:
            REACT_APP_AUTH_URL: https://api.demo-auction.deworker.pro
        networks:
            - traefik-public
            - default
        deploy:
            labels:
                - traefik.enable=true
                - traefik.docker.network=traefik-public
                - traefik.http.routers.frontend.rule=Host(`demo-auction.deworker.pro`) || Host(`www.demo-auction.deworker.pro`)
                - traefik.http.services.frontend.loadBalancer.server.port=80
                - traefik.http.middlewares.frontend-redirect.redirectRegex.regex=^(https?://)www.demo-auction.deworker.pro/(.*)$$
                - traefik.http.middlewares.frontend-redirect.redirectRegex.replacement=$${1}demo-auction.deworker.pro/$${2}
                - traefik.http.middlewares.frontend-redirect.redirectRegex.permanent=true
                - traefik.http.routers.frontend.middlewares=frontend-redirect,secure-headers
                - traefik.http.routers.frontend.entryPoints=https
                - traefik.http.routers.frontend.tls=true
                - traefik.http.routers.frontend.tls.certResolver=letsEncrypt
            mode: replicated
            replicas: 2
            update_config:
                parallelism: 1
                delay: 10s

    api:
        image: ${REGISTRY}/auction-api:${IMAGE_TAG}
        networks:
            - traefik-public
            - default
        deploy:
            labels:
                - traefik.enable=true
                - traefik.docker.network=traefik-public
                - traefik.http.routers.api.rule=Host(`api.demo-auction.deworker.pro`)
                - traefik.http.services.api.loadBalancer.server.port=80
                - traefik.http.routers.api.middlewares=secure-headers
                - traefik.http.routers.api.entryPoints=https
                - traefik.http.routers.api.tls=true
                - traefik.http.routers.api.tls.certResolver=letsEncrypt
            mode: replicated
            replicas: 2
            update_config:
                parallelism: 1
                delay: 5s

    api-php-fpm:
        image: ${REGISTRY}/auction-api-php-fpm:${IMAGE_TAG}
        environment:
            APP_ENV: prod
            APP_DEBUG: 0
            DB_HOST: api-postgres
            DB_USER: app
            DB_PASSWORD_FILE: /run/secrets/api_db_password
            DB_NAME: app
            MAILER_HOST: ${API_MAILER_HOST}
            MAILER_PORT: ${API_MAILER_PORT}
            MAILER_USERNAME: ${API_MAILER_USERNAME}
            MAILER_PASSWORD_FILE: /run/secrets/api_mailer_password
            MAILER_FROM_EMAIL: ${API_MAILER_FROM_EMAIL}
            FRONTEND_URL: https://demo-auction.deworker.pro
            SENTRY_DSN_FILE: /run/secrets/sentry_dsn
            JWT_ENCRYPTION_KEY_FILE: /run/secrets/jwt_encryption_key
            JWT_PUBLIC_KEY_PATH: /run/secrets/jwt_public_key
            JWT_PRIVATE_KEY_PATH: /run/secrets/jwt_private_key
        secrets:
            - api_db_password
            - api_mailer_password
            - sentry_dsn
            - jwt_encryption_key
            - jwt_public_key
            - jwt_private_key
        deploy:
            mode: replicated
            replicas: 2
            update_config:
                parallelism: 1
                delay: 5s

    api-migration:
        image: ${REGISTRY}/auction-api-php-cli:${IMAGE_TAG}
        environment:
            APP_ENV: prod
            APP_DEBUG: 0
            DB_HOST: api-postgres
            DB_USER: app
            DB_PASSWORD_FILE: /run/secrets/api_db_password
            DB_NAME: app
            MAILER_HOST: ${API_MAILER_HOST}
            MAILER_PORT: ${API_MAILER_PORT}
            MAILER_USERNAME: ${API_MAILER_USERNAME}
            MAILER_PASSWORD_FILE: /run/secrets/api_mailer_password
            MAILER_FROM_EMAIL: ${API_MAILER_FROM_EMAIL}
            FRONTEND_URL: https://demo-auction.deworker.pro
            SENTRY_DSN_FILE: /run/secrets/sentry_dsn
            JWT_ENCRYPTION_KEY_FILE: /run/secrets/jwt_encryption_key
            JWT_PUBLIC_KEY_PATH: /run/secrets/jwt_public_key
            JWT_PRIVATE_KEY_PATH: /run/secrets/jwt_private_key
        secrets:
            - api_db_password
            - api_mailer_password
            - sentry_dsn
            - jwt_encryption_key
            - jwt_public_key
            - jwt_private_key
        command: sh -c 'wait-for-it api-postgres:5432 -t 60 && php bin/app.php migrations:migrate --no-interaction'
        deploy:
            restart_policy:
                condition: on-failure
                delay: 5s
                max_attempts: 5
                window: 120s

    api-oauth-clear-expired:
        image: ${REGISTRY}/auction-api-php-cli:${IMAGE_TAG}
        environment:
            APP_ENV: prod
            APP_DEBUG: 0
            DB_HOST: api-postgres
            DB_USER: app
            DB_PASSWORD_FILE: /run/secrets/api_db_password
            DB_NAME: app
            MAILER_HOST: ${API_MAILER_HOST}
            MAILER_PORT: ${API_MAILER_PORT}
            MAILER_USERNAME: ${API_MAILER_USERNAME}
            MAILER_PASSWORD_FILE: /run/secrets/api_mailer_password
            MAILER_FROM_EMAIL: ${API_MAILER_FROM_EMAIL}
            FRONTEND_URL: https://demo-auction.deworker.pro
            SENTRY_DSN_FILE: /run/secrets/sentry_dsn
            JWT_ENCRYPTION_KEY_FILE: /run/secrets/jwt_encryption_key
            JWT_PUBLIC_KEY_PATH: /run/secrets/jwt_public_key
            JWT_PRIVATE_KEY_PATH: /run/secrets/jwt_private_key
        secrets:
            - api_db_password
            - api_mailer_password
            - sentry_dsn
            - jwt_encryption_key
            - jwt_public_key
            - jwt_private_key
        command: sh -c 'wait-for-it api-postgres:5432 -t 60 && php bin/app.php oauth:clear-expired'
        deploy:
            labels:
                - swarm.cronjob.enable=true
                - swarm.cronjob.schedule=0 * * * *
                - swarm.cronjob.skip-running=true
            replicas: 0
            restart_policy:
                condition: none

    api-postgres:
        image: postgres:13.3-alpine
        environment:
            POSTGRES_USER: app
            POSTGRES_PASSWORD_FILE: /run/secrets/api_db_password
            POSTGRES_DB: app
        secrets:
            - api_db_password
        volumes:
            - api-postgres:/var/lib/postgresql/data
        deploy:
            placement:
                constraints: [ node.labels.db == db ]
            endpoint_mode: dnsrr

    api-postgres-backup:
        image: ${REGISTRY}/auction-api-postgres-backup:${IMAGE_TAG}
        environment:
            BACKUP_NAME: auction_api-postgres
            POSTGRES_HOST: api-postgres
            POSTGRES_USERNAME: app
            POSTGRES_PASSWORD_FILE: /run/secrets/api_db_password
            POSTGRES_DB: app
            AWS_ACCESS_KEY_ID: ${BACKUP_AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY_FILE: /run/secrets/backup_aws_secret_access_key
            AWS_DEFAULT_REGION: ${BACKUP_AWS_DEFAULT_REGION}
            S3_ENDPOINT: ${BACKUP_S3_ENDPOINT}
            S3_BUCKET: ${BACKUP_S3_BUCKET}
        secrets:
            - api_db_password
            - backup_aws_secret_access_key
        command: sh -c 'wait-for-it api-postgres:5432 -t 60 && backup'
        deploy:
            labels:
                - swarm.cronjob.enable=true
                - swarm.cronjob.schedule=0 * * * *
                - swarm.cronjob.skip-running=true
            replicas: 0
            restart_policy:
                condition: none

    api-redis:
        image: ${REGISTRY}/auction-api-redis:${IMAGE_TAG}
        environment:
            REDIS_PASSWORD_FILE: /run/secrets/api_redis_password
        secrets:
            - api_redis_password
        volumes:
            - api-redis:/data
        command:
            - 'redis-server'
            - '--maxmemory 32mb'
            - '--maxmemory-policy allkeys-lru'
        deploy:
            placement:
                constraints: [ node.labels.db == db ]
            endpoint_mode: dnsrr

secrets:
    api_db_password:
        file: ./secrets/api_db_password
    api_redis_password:
        file: ./secrets/api_redis_password
    api_mailer_password:
        file: ./secrets/api_mailer_password
    sentry_dsn:
        file: ./secrets/sentry_dsn
    jwt_encryption_key:
        file: ./secrets/jwt_encryption_key
    jwt_public_key:
        file: ./secrets/jwt_public_key
    jwt_private_key:
        file: ./secrets/jwt_private_key
    backup_aws_secret_access_key:
        file: ./secrets/backup_aws_secret_access_key

volumes:
    api-postgres:
    api-redis:

networks:
    traefik-public:
        external: true
